import csv
import matplotlib.pyplot as plt
import os
import math
import pandas as pd
import json

def debug_show_ep_results():
    
    script_dir = os.path.dirname(__file__)
    project_root = os.path.dirname(script_dir)
    result_dir = os.path.join(project_root, 'output')
    result_file = os.path.join(result_dir, 'eplusout.csv')

    #generated by gemini
    temp = []

    with open(result_file, 'r') as csvfile:
        temp = get_csv_data(result_file,"MAIN:Zone Mean Air Temperature [C](Hourly)")[:24]

    # Create the line plot
    plt.figure(figsize=(12, 7)) # Slightly larger figure for two lines
    
    # Plot Column 2
    if temp:
        plt.plot(temp, marker='o', linestyle='-', label="room_temperature")
    


    plt.title(f'First 24 Values from {result_file.split(os.sep)[-1]}')
    plt.ylabel('Values')
    plt.grid(True)
    plt.legend() # Show the legend for multiple series
    plt.tight_layout() # Adjust layout to prevent labels from overlapping
    plt.show()
    
    return 0
def extract_ep_results(inputJSON, assumptions):
    script_dir = os.path.dirname(__file__)
    project_root = os.path.dirname(script_dir)
    result_dir = os.path.join(project_root, 'output')
    result_file = os.path.join(result_dir, 'eplusout.csv')
    output_file_path = os.path.join(result_dir, 'output.json')
    assumptions_out_path = os.path.join(result_dir, 'used_assumptions.json')
    gfa = inputJSON["gfa"]
    COP = inputJSON["COP"]

    # Calculate energy use
    annual_cooling_demand = round(sum(get_csv_data(result_file,"DistrictCooling:Facility [J](Hourly)"))*2.78*math.pow(10,-7)/gfa,2)
    annual_cooling_electricity = round(annual_cooling_demand/COP,2)
    annual_lighting_electricity = round(sum(get_csv_data(result_file,"main_lighting:InteriorLights:Electricity [J](Hourly)"))*2.78*math.pow(10,-7)/gfa,2)
    annual_equipment_electricity = round(sum(get_csv_data(result_file,"main_equipment:InteriorEquipment:Electricity [J](Hourly)"))*2.78*math.pow(10,-7)/gfa,2)
    annual_lift_electricity = round(sum(get_csv_data(result_file,"lifts:InteriorEquipment:Electricity [J](Hourly)"))*2.78*math.pow(10,-7)/gfa,2)
    annual_carpark_electricity = round(sum(get_csv_data(result_file,"carpark_lighting:InteriorLights:Electricity [J](Hourly)"))*2.78*math.pow(10,-7)/gfa,2) + round(sum(get_csv_data(result_file,"carpark_ventilation:InteriorEquipment:Electricity [J](Hourly)"))*2.78*math.pow(10,-7)/gfa,2)
    annual_outdoor_lighting_electricity = round(sum(get_csv_data(result_file,"facade_landscape_lighting:InteriorLights:Electricity [J](Hourly)"))*2.78*math.pow(10,-7)/gfa,2)
    annual_total_electricity = annual_cooling_electricity + annual_equipment_electricity +annual_lighting_electricity+ annual_lift_electricity + annual_carpark_electricity + annual_outdoor_lighting_electricity
    max_electricity_demand = round(max(get_csv_data(result_file,"Electricity:Facility [J](Hourly)"))*2.78*math.pow(10,-7),2)
    max_cooling_demands = round(max(get_csv_data(result_file,"DistrictCooling:Facility [J](Hourly)"))*2.78*math.pow(10,-7),2)
    
    # Calculate 
    gridFactor = assumptions['Grid pollution (kgCO2e/kWh)']
    
    EUI_submission = annual_total_electricity 
    EUI_average = assumptions['Average Malaysian EUI (kWh/m2/year)']
    EUI_threshold = assumptions['1-star threshold EUI (kWh/m2/year)']
    
    submission_operation = annual_total_electricity * gridFactor
    submission_embodied = 1
    submission_transport = 1
    average_operation =EUI_average * gridFactor
    average_embodied = 1
    average_transport = 1
    threshold_operation = EUI_threshold * gridFactor
    threshold_embodied = 1
    threshold_transport = 1
    
    output= {
        "cooling_electricity":annual_cooling_electricity,
        "cooling_consumption":annual_cooling_demand,
        "lighting_indoor_electricity":annual_lighting_electricity,
        "equipment_electricity":annual_equipment_electricity,
        "lift_electricity": annual_lift_electricity,
        "carpark_electricity": annual_carpark_electricity, 
        "lighting_outdoor_electricity":annual_outdoor_lighting_electricity,
        "total_electricity":annual_total_electricity,
        "max_electricity_demand": max_electricity_demand,
        "max_cooling_demand_kW": max_cooling_demands,
        "max_cooling_demand_RT": max_cooling_demands*0.284,
        "EUI_submission": EUI_submission,
        "EUI_average": EUI_average,
        "EUI_threshold": EUI_threshold,
        "submission_operation": submission_operation,
        "submission_embodied": submission_embodied,
        "submission_transport": submission_transport,
        "average_operation": average_operation,
        "average_embodied": average_embodied,
        "average_transport": average_transport,
        "threshold_operation": threshold_operation,
        "threshold_embodied": threshold_embodied,
        "threshold_transport": threshold_transport,
        
    }
    with open(output_file_path, 'w') as output_file:
        json.dump(output, output_file,indent=2)
        
    with open(assumptions_out_path, 'w') as output_file:
        json.dump(assumptions, output_file,indent=2)
    
    
    return 0


def get_csv_data(csv_path,header):
    df = pd.read_csv(csv_path)
    return df[header].tolist()